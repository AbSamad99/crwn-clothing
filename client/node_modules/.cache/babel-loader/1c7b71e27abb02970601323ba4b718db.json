{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\E480\\\\Desktop\\\\crwn-clothing\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\Users\\\\E480\\\\Desktop\\\\crwn-clothing\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\E480\\\\Desktop\\\\crwn-clothing\\\\client\\\\src\\\\components\\\\sign-in\\\\sign-in.component.jsx\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport './sign-in.styles.scss';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions';\n\nconst SignIn = ({\n  emailSignInStart,\n  googleSignInStart\n}) => {\n  const _useState = useState({\n    email: '',\n    password: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        userCredentials = _useState2[0],\n        setCredentials = _useState2[1];\n\n  const onChange = event => {\n    const _event$target = event.target,\n          value = _event$target.value,\n          name = _event$target.name;\n    setCredentials(_objectSpread({}, userCredentials, {\n      [name]: value\n    }));\n  };\n\n  const email = userCredentials.email,\n        password = userCredentials.password;\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    emailSignInStart(email, password);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"sign-in\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"I already have an account\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"Sign in with your email and password\"), React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(FormInput, {\n    type: \"email\",\n    name: \"email\",\n    value: email,\n    required: true,\n    label: \"Email\",\n    handleChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), React.createElement(FormInput, {\n    type: \"password\",\n    name: \"password\",\n    value: password,\n    required: true,\n    label: \"Password\",\n    handleChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"buttons\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(CustomButton, {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"sign in\"), React.createElement(CustomButton, {\n    type: \"button\",\n    isGoogleSignIn: true,\n    onClick: googleSignInStart,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"sign in with google\"))));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["C:/Users/E480/Desktop/crwn-clothing/client/src/components/sign-in/sign-in.component.jsx"],"names":["React","useState","connect","FormInput","CustomButton","googleSignInStart","emailSignInStart","SignIn","email","password","userCredentials","setCredentials","onChange","event","target","value","name","handleSubmit","preventDefault","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './sign-in.styles.scss';\r\n\r\nimport FormInput from '../form-input/form-input.component';\r\nimport CustomButton from '../custom-button/custom-button.component';\r\n\r\nimport {googleSignInStart,emailSignInStart} from '../../redux/user/user.actions';\r\n\r\nconst SignIn=({emailSignInStart,googleSignInStart})=>{\r\n\r\n    const [userCredentials,setCredentials]=useState({email:'',password:''})\r\n    \r\n    const onChange=(event)=>{\r\n        const {value,name}=event.target;\r\n        setCredentials({...userCredentials,[name]:value});\r\n    }\r\n    \r\n    const {email,password}=userCredentials; \r\n\r\n    const handleSubmit=async (event)=>{\r\n        event.preventDefault();\r\n        emailSignInStart(email,password);        \r\n    }\r\n    \r\n    return(\r\n        <div className='sign-in' >\r\n            <h1 className='title' >I already have an account</h1>\r\n            <span>Sign in with your email and password</span>\r\n            <form onSubmit={handleSubmit} >\r\n                <FormInput\r\n                 type='email' \r\n                 name='email' \r\n                 value={email} \r\n                 required\r\n                 label='Email' \r\n                 handleChange={onChange}          \r\n                 />\r\n                <FormInput \r\n                type='password' \r\n                name='password' \r\n                value={password} \r\n                required \r\n                label='Password'\r\n                handleChange={onChange}\r\n                />\r\n                <div className='buttons' >\r\n                <CustomButton type='submit' >sign in</CustomButton>\r\n                <CustomButton type='button' isGoogleSignIn onClick={googleSignInStart} >sign in with google</CustomButton>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps=(dispatch)=>({\r\n    googleSignInStart:()=>dispatch(googleSignInStart()),\r\n    emailSignInStart:(email,password)=>dispatch(emailSignInStart({email,password}))\r\n})\r\n\r\nexport default connect(null,mapDispatchToProps)(SignIn);"]},"metadata":{},"sourceType":"module"}